import json
from datetime import date, timedelta
from typing import Union, Dict

from telebot import types
from telebot.types import CallbackQuery
from telegram_bot_calendar import DetailedTelegramCalendar

from config_data.config import RAPID_API_HEADERS, RAPID_API_ENDPOINTS
from keyboards.city import get_cities, for_city, get_kb_calendar
from main import bot
from states.user_states import state
from tg_API.util.adress import get_hotel_address
from tg_API.util.answer import show_info, count_amount_nights
from tg_API.util.api_reqiest import request_to_api


@bot.message_handler(commands='low')
def send_welcome(message: types.Message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π")
    bot.delete_state(message.from_user.id, message.chat.id)
    bot.set_state(message.from_user.id, state.city, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['last_command'] = 'low'


@bot.message_handler(state=state.city)
def get_city(message: types.Message):
    kb = get_cities(pars_cities(message.text))
    bot.send_message(message.from_user.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥: ', reply_markup=kb)


def pars_cities(city: str) -> Union[Dict[str, str], None]:
    query_srting = {'q': city, "locale": "ru_RU", "langid": "1033", "siteid": "300000001"}
    response = request_to_api(
        method_type='GET',
        url='https://hotels4.p.rapidapi.com/locations/v3/search',
        payload=query_srting,
        headers=RAPID_API_HEADERS
    )
    data_site = json.loads(response.text)
    cities = dict()
    if data_site.get('sr'):
        city_list = data_site.get('sr')
        for elem in city_list:
            for k, v in elem.items():
                if k == 'type' and (v == 'CITY' or v == 'MULTICITY'):
                    city_id = elem.get('gaiaId')
                    city_name = elem.get('regionNames').get('fullName')
                    cities[city_name] = city_id
    return cities


@bot.callback_query_handler(func=None, city_config=for_city.filter())  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
def count_hotel(call: CallbackQuery):
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:  # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–∫–∏
        data['city_id'] = call.data.split(':')[1]
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
    bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π')
    bot.set_state(call.from_user.id, state.count_hotel, call.message.chat.id)


@bot.message_handler(state=state.count_hotel)
def get_choose_data(message: types.Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['count_hotel'] = message.text

    kb = get_kb_calendar()
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: ', reply_markup=kb)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def date_reply(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–∏—Å–∞–Ω—ã –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'start_date' –∏ 'end_date'.
    –ï—Å–ª–∏ –Ω–µ—Ç - —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'last_command'.
    –ï—Å–ª–∏ 'last_command' == 'low' –∏–ª–∏ 'high' - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏
    –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞—Ç–µ–º –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.
    –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å.

    """

    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        if not data.get('start_date'):
            result, key, step = DetailedTelegramCalendar(min_date=date.today()).process(call.data)
        elif not data.get('end_date'):
            new_start_date = data.get('start_date') + timedelta(1)
            result, key, step = DetailedTelegramCalendar(min_date=new_start_date).process(call.data)

    if not result and key:
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É", call.message.chat.id, call.message.message_id, reply_markup=key)
    elif result:
        with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
            if not data.get('start_date'):
                data['start_date'] = result
                calendar, step = DetailedTelegramCalendar(min_date=result + timedelta(1)).build()
                bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                                      call.message.chat.id, call.message.message_id, reply_markup=calendar)
            elif not data.get('end_date'):
                data['end_date'] = result

                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                print(data.get('last_command'))
                if data.get('last_command') in ('low', 'high'):
                    data_dict = data
                    hotel_cities(call.message, data_dict)
                    # bot.set_state(call.from_user.id, UsersStates.last_command, call.message.chat.id)
                    bot.send_message(call.message.chat.id,
                                     f"üòâüëå –í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.\n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥—É!\n"
                                     f"–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")



def process_hotels_info(hotels_info_list) -> Dict[int, Dict]:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–µ–ª–µ–π, –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç
    –≤ —Å–ª–æ–≤–∞—Ä—å hotels_info_dict

    :param hotels_info_list: –°–ø–∏—Å–æ–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏. –ö–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ç–µ–ª—é (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞).
    :param amount_nights: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ—Ç–µ–ª—é: {hotel_id: {hotel_info}} (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º).
    """

    hotels_info_dict = dict()
    for key, value in hotels_info_list.items():
        hotel_name = key
        hotel_id = value[0]
        price_per_night = value[2]
        distance_city_center = value[1]
        hotel_neighbourhood = get_hotel_address(value[0])
        total_price = value[4]

        hotels_info_dict[hotel_id] = {
            'name': hotel_name,
            'price_per_night': price_per_night,
            'total_price': total_price,
            'distance_city_center': distance_city_center,
            'hotel_url': f'https://www.hotels.com/h{hotel_id}.Hotel-Information/',
            'hotel_neighbourhood': hotel_neighbourhood
        }
    return hotels_info_dict


def hotel_cities(message: types.Message, data: dict) -> Union[Dict[str, str], None]:  # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
    global payload

    if data.get('last_command') == 'high':
        sort_order = 'PRICE_HIGHEST_FIRST'
    elif data.get('last_command') == 'bestdeal':
        sort_order = 'DISTANCE'
    else:
        sort_order = 'PRICE_LOW_TO_HIGH'

    check_in = (str(data["start_date"])).split("-")
    check_out = (str(data["end_date"])).split("-")

    if data.get('last_command') in ('high', 'low'):
        payload = {
            "locale": "ru_RU",
            "destination": {"regionId": data['city_id']},
            "resultsSize": int(data['count_hotel']),
            "checkInDate": {
                "day": int(check_in[2]),
                "month": int(check_in[1]),
                "year": int(check_in[0])
            },
            "checkOutDate": {
                "day": int(check_out[2]),
                "month": int(check_out[1]),
                "year": int(check_out[0])
            },
            "rooms": [{"adults": 1, "children": []}],
            "sort": sort_order
        }

    response = request_to_api(
        method_type='POST',
        url=RAPID_API_ENDPOINTS['hotel-list'],
        payload=payload,
        headers=RAPID_API_HEADERS)

    amount_nights = count_amount_nights(data['start_date'], data['end_date'])

    data = json.loads(response.text)

    hotels = dict()
    if data.get('data').get('propertySearch').get('properties'):
        for element in data.get('data').get('propertySearch').get('properties'):
            if len(hotels) < 25:
                if element.get('__typename') == 'Property':
                    hotel_id = element.get('id')
                    hotel_primary_img = element.get('propertyImage').get('image').get('url')
                    current_price = round(element.get('price').get('lead').get('amount'), 2)
                    hotel_distance = round(float(
                        element.get('destinationInfo').get('distanceFromDestination').get('value')) * 1.6, 2)
                    total_price = ''
                    for elem in element.get('price').get('displayMessages'):
                        for k, v in elem.items():
                            if k == 'lineItems':
                                for var in v:
                                    for n, val in var.items():
                                        if n == "value" and "total" in val:
                                            total_price = val
                                            break
                    hotels[element.get('name')] = [
                        hotel_id, hotel_distance, current_price, hotel_primary_img, total_price
                    ]
            else:
                break

    info_hotels = process_hotels_info(hotels)  # –º–Ω–æ–≥–æ –æ—Ç–µ–ª–µ–π
    show_info(message=message,
              amount_photo=5,
              result_data=info_hotels,
              amount_nights=amount_nights)
    print('Don')
