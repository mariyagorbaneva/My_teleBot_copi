from telebot import types
from telebot.types import CallbackQuery
from config_data.config import RAPID_API_HEADERS, RAPID_API_ENDPOINTS
from keyboards.city import get_cities, for_city, get_kb_calendar
from main import bot
from states.user_states import state

from loader import bot
from telebot.types import Message, CallbackQuery
from loguru import logger
from tg_API.util import get_cities
from tg_API.util.get_cities import pars_cities, print_cities
from telegram_bot_calendar import DetailedTelegramCalendar
from datetime import date, timedelta
from tg_API.util import api_reqiest


@bot.message_handler(state=state.cities)
def get_city(message: Message):
    kb = get_cities(pars_cities(message.text))
    bot.send_message(message.from_user.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥: ', reply_markup=kb)

    cities_dict = pars_cities(message.text)
    if cities_dict:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['cities'] = cities_dict
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:', reply_markup=print_cities(cities_dict))
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')


@bot.callback_query_handler(func=None, city_config=for_city.filter())  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
def count_hotel(call: CallbackQuery):
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:  # –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–∫–∏
        data['city_id'] = call.data.split(':')[1]
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
    bot.send_message(call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π')
    bot.set_state(call.from_user.id, state.count_hotel, call.message.chat.id)


@bot.message_handler(state=state.count_hotel)
def get_choose_data(message: types.Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['count_hotel'] = message.text

    kb = get_kb_calendar()
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: ', reply_markup=kb)

@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def date_reply(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–∏—Å–∞–Ω—ã –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'start_date' –∏ 'end_date'.
    –ï—Å–ª–∏ –Ω–µ—Ç - —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'last_command'.
    –ï—Å–ª–∏ 'last_command' == 'low' –∏–ª–∏ 'high' - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏
    –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞—Ç–µ–º –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.
    –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å.

    """

    with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
        if not data.get('start_date'):
            result, key, step = DetailedTelegramCalendar(min_date=date.today()).process(call.data)
        elif not data.get('end_date'):
            new_start_date = data.get('start_date') + timedelta(1)
            result, key, step = DetailedTelegramCalendar(min_date=new_start_date).process(call.data)

    if not result and key:
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É", call.message.chat.id, call.message.message_id, reply_markup=key)
    elif result:
        with bot.retrieve_data(call.message.chat.id, call.message.chat.id) as data:
            if not data.get('start_date'):
                data['start_date'] = result
                calendar, step = DetailedTelegramCalendar(min_date=result + timedelta(1)).build()
                bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                                      call.message.chat.id, call.message.message_id, reply_markup=calendar)
            elif not data.get('end_date'):
                data['end_date'] = result

                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

                if data.get('last_command') in ('lowprice', 'highprice'):
                    data_dict = data
                    #low_high_price_answer(call.message, data_dict, call.from_user.username)
                    bot.set_state(call.from_user.id, state.last_command, call.message.chat.id)
                    bot.send_message(call.message.chat.id,
                                     f"üòâüëå –í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.\n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥—É!\n"
                                     f"–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")
                else:
                    bot.set_state(call.from_user.id, state.start_price, call.message.chat.id)
                    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å $:")

@bot.message_handler(state=state.start_price, is_digit=True)
def get_start_price(message: Message) -> None:
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['start_price'] = int(message.text)
    bot.set_state(message.chat.id, message.from_user.id, state.end_price)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å $: ')

@bot.message_handler(state=state.start_price, is_digit=False) # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ
def star_price_incorrect(message: Message) -> None:
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è! ')  #–µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

@bot.message_handler(state=state.end_price, is_digit=True)
def get_end_price(message: Message) ->None:
    if int(message.text) > 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if int(message.text) > data['start_price']:
                data['end_price'] = int(message.text)
                bot.set_state(message.from_user.id, state.end_distance, message.chat.id)
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º\n"
                                                  "(–Ω–∞–ø—Ä–∏–º–µ—Ä 10):")
            else:
                bot.send_message(message.chat.id,
                                 f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {data['start_price']}$")
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')

@bot.message_handler(state=state.end_price, is_digit=False)
def get_end_price_incorrect(message: Message) ->None:
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è! ')


@bot.message_handler(state=state.end_distance)
def get_end_distance(message: Message) -> None:


    if ',' in message.text:
        message.text = message.text.replace(',', '.')

    try:
        message.text = float(message.text)
        if message.text > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['end_distance'] = message.text
                #data_dict = data
                bot.set_state(message.from_user.id, state.last_command, message.chat.id)
                bot.send_message(message.chat.id, f"–í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.\n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥—É!\n"
                                                  f"–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")
        else:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')
    except Exception:
        bot.set_state(message.from_user.id, state.last_command, message.chat.id)
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                                          "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")





    print('Don')
